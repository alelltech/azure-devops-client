export interface AzurePipelineKey {
  organization: string;
  project: string;
  id: string;
}
export interface AzureListResult<T> {
  count?: number;
  value?: Array<T>;
}

// Generated by https://quicktype.io

export interface AzurePipelineInfo {
  _links: { [x: string]: { href: string } };
  url: string;
  id: number;
  revision: number;
  name: string;
  folder: string;
}

// Generated by https://quicktype.io

export interface AzurePipelineDefinition {
  triggers: AzurePipelineDefinitionTrigger[];
  properties: any;
  tags: any[];
  _links: AzurePipelineDefinitionLinks;
  buildNumberFormat: string;
  jobAuthorizationScope: number;
  jobTimeoutInMinutes: number;
  jobCancelTimeoutInMinutes: number;
  process: AzurePipelineDefinitionProcess;
  repository: AzurePipelineDefinitionRepository;
  quality: number;
  authoredBy: AzurePipelineDefinitionAuthoredBy;
  drafts: any[];
  queue: AzurePipelineDefinitionQueue;
  id: number;
  name: string;
  url: string;
  uri: string;
  path: string;
  type: number;
  queueStatus: number;
  revision: number;
  createdDate: string;
  project: AzurePipelineDefinitionProject;
}

export interface AzurePipelineDefinitionLinks {
  self: AzurePipelineDefinitionLink;
  web: AzurePipelineDefinitionLink;
  editor: AzurePipelineDefinitionLink;
  badge: AzurePipelineDefinitionLink;
}

export interface AzurePipelineDefinitionLink {
  href: string;
}

export interface AzurePipelineDefinitionAuthoredBy {
  displayName: string;
  url: string;
  _links: AzurePipelineDefinitionAuthoredByLinks;
  id: string;
  uniqueName: string;
  imageUrl: string;
  descriptor: string;
}

export interface AzurePipelineDefinitionAuthoredByLinks {
  avatar: AzurePipelineDefinitionLink;
}

export interface AzurePipelineDefinitionProcess {
  yamlFilename: string;
  type: number;
}

export interface AzurePipelineDefinitionProject {
  id: string;
  name: string;
  description: string;
  url: string;
  state: number;
  revision: number;
  visibility: number;
  lastUpdateTime: string;
}

export interface AzurePipelineDefinitionQueue {
  _links: AzurePipelineDefinitionQueueLinks;
  id: number;
  name: string;
  url: string;
  pool: AzurePipelineDefinitionPool;
}

export interface AzurePipelineDefinitionQueueLinks {
  self: AzurePipelineDefinitionLink;
}

export interface AzurePipelineDefinitionPool {
  id: number;
  name: string;
}

export interface AzurePipelineDefinitionRepository {
  properties: RepositoryProperties;
  id: string;
  type: string;
  name: string;
  url: string;
  defaultBranch: string;
  clean: string;
  checkoutSubmodules: boolean;
}

export interface RepositoryProperties {
  safeRepository: string;
  reportBuildStatus: string;
  fetchDepth: string;
  cleanOptions: string;
  gitLfsSupport: string;
  skipSyncSource: string;
  checkoutNestedSubmodules: string;
}

export interface AzurePipelineDefinitionTrigger {
  branchFilters: any[];
  pathFilters: any[];
  settingsSourceType: number;
  batchChanges: boolean;
  maxConcurrentBuildsPerBranch: number;
  triggerType: number;
}

// Generated by https://quicktype.io

export interface AzurePipelineRunResult {
  _links: AzurePipelineRunLinks;
  templateParameters: AzurePipelineRunTemplateParameters;
  pipeline: AzurePipelineRunResultPipeline;
  state: string;
  createdDate: string;
  url: string;
  resources: AzurePipelineRunResources;
  id: number;
  name: string;
}

export interface AzurePipelineRunLinks {
  self: AzurePipelineRunWebClass;
  web: AzurePipelineRunWebClass;
  "pipeline.web": AzurePipelineRunWebClass;
  pipeline: AzurePipelineRunWebClass;
}

export interface AzurePipelineRunWebClass {
  href: string;
}

export interface AzurePipelineRunResultPipeline {
  url: string;
  id: number;
  revision: number;
  name: string;
  folder: string;
}

export interface AzurePipelineRunResources {
  repositories: AzurePipelineRunRepositories;
}

export interface AzurePipelineRunRepositories {
  self: AzurePipelineRunSelf;
}

export interface AzurePipelineRunSelf {
  repository: AzurePipelineRunRepository;
  refName: string;
  version: string;
}

export interface AzurePipelineRunRepository {
  id: string;
  type: string;
}

export interface AzurePipelineRunTemplateParameters {
  environment: string;
  action: string;
}

export interface BuildQueryParams {
  /** The maximum number of builds to return */
  $top?: number;
  /** Filters to builds that built branches that built this branch */
  branchName?: string;
  /** A comma-delimited list that specifies the IDs of builds to retrieve */
  buildIds?: number[];
  /** Filters to builds that match this build number. Append * to do a prefix search */
  buildNumber?: string;
  /** A continuation token for pagination */
  continuationToken?: string;
  /** A comma-delimited list of definition IDs */
  definitions?: number[];
  /** Indicates whether to exclude, include, or only return deleted builds */
  // deletedFilter?: QueryDeletedOption;
  /** The maximum number of builds to return per definition */
  maxBuildsPerDefinition?: number;
  /** Filters to builds that finished/started/queued before this date based on the queryOrder specified */
  maxTime?: string;
  /** Filters to builds that finished/started/queued after this date based on the queryOrder specified */
  minTime?: string;
  /** A comma-delimited list of properties to retrieve */
  properties?: string[];
  /** The order in which builds should be returned */
  // queryOrder?: BuildQueryOrder;
  /** A comma-delimited list of queue IDs */
  queues?: number[];
  /** Filters to builds that match this reason */
  // reasonFilter?: BuildReason;
  /** Filters to builds that built from this repository */
  repositoryId?: string;
  /** Filters to builds that built from repositories of this type */
  repositoryType?: string;
  /** Filters to builds requested for the specified user */
  requestedFor?: string;
  /** Filters to builds that match this result */
  // resultFilter?: BuildResult;
  /** Filters to builds that match this status */
  // statusFilter?: BuildStatus;
  /** A comma-delimited list of tags */
  tagFilters?: string[];
}

export interface TimelineResult {
  records: TimelineRecord[];
  lastChangedBy: string;
  lastChangedOn: string;
  id: string;
  changeId: number;
  url: string;
}

export interface TimelineRecord {
  previousAttempts: any[];
  id: string;
  parentId: null | string;
  type: string;
  name: string;
  startTime: string | null;
  finishTime: string | null;
  currentOperation: null;
  percentComplete: number | null;
  state: string;
  result: string;
  resultCode: null | string;
  changeId: number;
  lastModified: string;
  workerName: string;
  details: null;
  errorCount: number;
  warningCount: number;
  url: null;
  log: TimelineLog | null;
  task: TimelineTask | null;
  attempt: number;
  identifier: null | string;
  order?: number;
  issues?: TimelineIssue[];
  queueId?: number;
}

export interface TimelineIssue {
  type: string;
  category: null;
  message: string;
  data: TimelineData;
}

export interface TimelineData {
  logFileLineNumber: string;
}

export interface TimelineLog {
  id: number;
  type: string;
  url: string;
}

export interface TimelineTask {
  id: string;
  name: string;
  version: string;
}
